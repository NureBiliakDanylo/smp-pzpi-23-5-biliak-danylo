#!/bin/bash

VERSION="1.0"

print_help() {
    echo "Використання: $0 [ОПЦІЇ] 'Назва групи' вхідний_файл.csv"
    echo
    echo "Опції:"
    echo "  --help       Вивести цю довідку та завершити роботу"
    echo "  --version    Вивести інформацію про версію та завершити роботу"
    echo "  -q, --quiet  Працювати у тихому режимі (без виводу повідомлень)"
    exit 0
}

print_version() {
    echo "$0 версія $VERSION"
    exit 0
}

select_csv_file() {
    local csv_files=($(ls -1v TimeTable_??_??_20??.csv 2>/dev/null))
    if [ ${#csv_files[@]} -eq 0 ]; then
        echo "Помилка: У поточній директорії немає CSV-файлів за шаблоном TimeTable_??_??_20??.csv." >&2
        exit 1
    fi
    select file in "${csv_files[@]}"; do
        if [[ -n "$file" ]]; then
            echo "$file"
            break
        else
            echo "Будь ласка, виберіть правильний номер файлу."
        fi
    done
}

select_academic_group() {
    local input_file="$1"
    local groups=($(iconv -f WINDOWS-1251 -t UTF-8 "$input_file" 2>/dev/null | tr '\r' '\n' | awk -F'","' '
        NR > 1 {
            if (match($0, /[A-Za-zА-Яа-яіїєґІЇЄҐ]+-[0-9]{2}-[0-9]{1,2}/)) {
                group = substr($0, RSTART, RLENGTH);
                print group;
            }
        }
    ' | sort | uniq))
    if [ ${#groups[@]} -eq 0 ]; then
        echo "Помилка: У файлі '$input_file' не знайдено академічних груп." >&2
        exit 1
    fi
    select group in "${groups[@]}"; do
        if [[ -n "$group" ]]; then
            echo "$group"
            break
        else
            echo "Будь ласка, виберіть правильний номер групи."
        fi
    done
}

QUIET=0
POSITIONAL=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) print_help ;;
        --version) print_version ;;
        -q|--quiet) QUIET=1 ;;
        *) POSITIONAL+=("$1") ;;
    esac
    shift
done

set -- "${POSITIONAL[@]}"

if [ "$#" -lt 2 ]; then
    if [ "$#" -eq 0 ]; then
        INPUT_FILE=$(select_csv_file)
        GROUP_NAME=$(select_academic_group "$INPUT_FILE")
    else
        echo "Помилка: необхідно вказати 'Назву групи' та вхідний CSV-файл." >&2
        exit 1
    fi
else
    GROUP_NAME="$1"
    INPUT_FILE="$2"
fi

if [ ! -f "$INPUT_FILE" ]; then
    echo "Помилка: Файл '$INPUT_FILE' не знайдено." >&2
    exit 1
fi

DATE_PART=$(echo "$INPUT_FILE" | grep -oE '[0-9]{2}_[0-9]{2}_[0-9]{4}')
OUTPUT_FILE="Google_TimeTable_${DATE_PART}.csv"

{
    echo '"Subject","Start Date","Start Time","End Date","End Time","Description"'

    iconv -f WINDOWS-1251 -t UTF-8 "$INPUT_FILE" | tr '\r' '\n' | awk -v group="$GROUP_NAME" -F'","' '
        BEGIN { OFS="," }

        NR == 1 { next }

        {
            subject = $1;
            start_date = $2;
            start_time = $3;
            end_date = $4;
            end_time = $5;

            split(start_date, date_parts, ".");
            split(start_time, time_parts, ":");
            sort_key = date_parts[3] date_parts[2] date_parts[1] time_parts[1] time_parts[2] time_parts[3];

            data[sort_key] = $0;
        }

        function convert_time(t) {
            split(t, parts, ":")
            hour = parts[1] + 0
            minute = parts[2]
            second = (length(parts) > 2) ? parts[3] : "00"
            suffix = (hour >= 12) ? "PM" : "AM"
            if (hour == 0) hour = 12
            else if (hour > 12) hour -= 12
            return hour ":" minute ":" second " " suffix
        }

        function convert_date(d) {
            split(d, parts, ".")
            return parts[2] "/" parts[1] "/" parts[3]
        }

        END {
            n = asorti(data, sorted_keys)
            for (i = 1; i <= n; i++) {
                row = data[sorted_keys[i]]
                split(row, fields, "\",\"")

                subject_raw = substr(fields[1], 2)
                subject = (index(subject_raw, " - ") > 0) ? substr(subject_raw, index(subject_raw, " - ") + 3) : subject_raw
                description = subject;

                group_prefix = substr(group, 1, length(group) - 2)
                group_number = substr(group, length(group))

                if (index(subject_raw, group_prefix) > 0 && index(subject_raw, group_number) > 0) {

                    if (subject ~ / Лб /) {
                        if (!(subject in lab_count)) {
                            lab_count[subject] = 0
                            lab_seen[subject] = 0
                        }
                        lab_seen[subject]++
                        if (lab_seen[subject] % 2 == 1) {
                            lab_count[subject]++
                        }
                        num = lab_count[subject]
                    } else {
                        if (!(subject in count)) count[subject] = 0
                        count[subject]++
                        num = count[subject]
                    }

                    subject_with_num = subject "; №" num

                    start_date = convert_date(fields[2])
                    end_date = convert_date(fields[4])
                    start_time = convert_time(fields[3])
                    end_time = convert_time(fields[5])

                    print "\"" subject_with_num "\",\"" start_date "\",\"" start_time "\",\"" end_date "\",\"" end_time "\",\"" description "\""
                }
            }
        }
    '
} > "$OUTPUT_FILE"

if [ "$QUIET" -eq 0 ]; then
    echo "Файл підготовлено: $OUTPUT_FILE"
fi
